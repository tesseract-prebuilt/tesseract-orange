#!/usr/bin/env bash
# Install product to the system
#
# Copyright 2024 林博仁 <buo.ren.lin@gmail.com>
# SPDX-License-Identifier: AGPL-3.0-or-later
TESSERACT_ORANGE_PREFIX="${TESSERACT_ORANGE_PREFIX:-__TESSERACT_ORANGE_PREFIX__}"

set_opts=(
    # Terminate script execution when an unhandled error occurs
    -o errexit
    -o errtrace

    # Terminate script execution when an unset parameter variable is
    # referenced
    -o nounset
)
if ! set "${set_opts[@]}"; then
    printf \
        'Error: Unable to set the defensive interpreter behavior.\n' \
        1>&2
    exit 1
fi

required_commands=(
    realpath

    # For determining the operation timestamp
    date

    # For querying the username of the running user
    whoami
)
flag_dependency_check_failed=false
for command in "${required_commands[@]}"; do
    if ! command -v "${command}" >/dev/null; then
        flag_dependency_check_failed=true
        printf \
            'Error: Unable to locate the "%s" command in the command search PATHs.\n' \
            "${command}" \
            1>&2
    fi
done
if test "${flag_dependency_check_failed}" == true; then
    printf \
        'Error: Dependency check failed, please check your installation.\n' \
        1>&2
    exit 1
fi

if test -v BASH_SOURCE; then
    # Convenience variables
    # shellcheck disable=SC2034
    {
        script="$(
            realpath \
                --strip \
                "${BASH_SOURCE[0]}"
        )"
        script_dir="${script%/*}"
        script_filename="${script##*/}"
        script_name="${script_filename%%.*}"
    }
fi

common_functions_file="${script_dir}/functions.sh"
if ! test -e "${common_functions_file}"; then
    printf \
        'Error: This program requires the common functions file "%s" to exist.\n' \
        "${common_functions_file}" \
        1>&2
    exit 2
fi

# shellcheck source=functions.sh
if ! source "${common_functions_file}"; then
    printf \
        'Error: Unable to load the common functions file "%s".\n' \
        "${common_functions_file}" \
        1>&2
    exit 2
fi

print_progress \
    'Tesseract Orange installer' \
    =

print_progress \
    'Checking runtime parameters...'
printf \
    'Checking running user...\n'
if ! check_running_user; then
    printf \
        'Error: The running user check has failed.\n' \
        1>&2
    exit 1
fi

printf \
    'Info: Checking program parameters...\n'
if test "${TESSERACT_ORANGE_PREFIX}" == __TESSERACT_ORANGE_PREFIX__; then
    printf \
        'Error: The TESSERACT_ORANGE_PREFIX program parameter is uninitialized, this deployment archive may be corrupted.\n' \
        1>&2
    exit 1
fi

print_progress \
    'Detecting operating system distribution information...'
printf \
    'Info: Querying the operating system distribution identifier...\n'
if ! distro_id="$(get_distro_identifier)"; then
    printf \
        'Error: Unable to query the operating system distribution identifier.\n' \
        1>&2
    exit 2
fi
printf \
    'Info: The operating system distribution identifier of this system is "%s".\n' \
    "${distro_id}"

installer_dependency_pkgs=(
    # For installing product files while preserving original metadata
    rsync
)
if ! check_distro_packages_installed "${installer_dependency_pkgs[@]}"; then
    print_progress \
        'Ensuring the product installer dependencies...'

    printf \
        'Info: Installing the product installer dependencies packages...\n'
    if ! install_distro_packages "${installer_dependency_pkgs[@]}"; then
        printf \
            'Error: Unable to install the product installer dependencies packages.\n' \
            1>&2
        exit 2
    fi
fi

print_progress \
    'Ensuring the runtime dependencies of this product...'
runtime_dependency_pkgs=()
case "${distro_id}" in
    ubuntu)
        printf \
            'Info: Querying the operating system distribution version of the current system...\n'
        if ! distro_version="$(get_distro_version)"; then
            printf \
                'Error: Unable to query the operating system distribution version.\n' \
                1>&2
            exit 2
        fi
        printf \
            'Info: The operating system distribution version of the current system is determined to be "%s".\n' \
            "${distro_version}"

        case "${distro_version}" in
            22.04)
                runtime_dependency_pkgs_leptonica_ubuntu2204=(
                    libgif7
                    libjpeg8
                    libopenjp2-7
                    libpng16-16
                    libtiff5
                    libwebp7
                    zlib1g
                )

                runtime_dependency_pkgs_tesseract_ubuntu2204=(
                    libarchive13
                    libcairo2
                    libcurl4
                    libicu70
                    libpango-1.0-0
                    ocl-icd-libopencl1
                )
                runtime_dependency_pkgs+=(
                    "${runtime_dependency_pkgs_leptonica_ubuntu2204[@]}"
                    "${runtime_dependency_pkgs_tesseract_ubuntu2204[@]}"
                )
            ;;
            *)
                printf \
                    'Error: The Ubuntu version "%s" on this system is not supported.\n' \
                    "${distro_version}" \
                    1>&2
                exit 1
            ;;
        esac
    ;;
    *)
        printf \
            'Error: Operating system distribution ID(%s) not supported.\n' \
            "${distro_id}" \
            1>&2
        exit 1
    ;;
esac

if ! check_package_manager_commands; then
    printf \
        'Error: Package manager command check failed.\n' \
        1>&2
    exit 1
fi

if ! check_distro_packages_installed "${runtime_dependency_pkgs[@]}"; then
    printf \
        'Info: Installing the runtime dependencies packages for the Tesseract Orange product...\n'
    if ! install_distro_packages "${runtime_dependency_pkgs[@]}"; then
        printf \
            'Error: Unable to install the runtime dependencies packages for the Tesseract Orange product.\n' \
            1>&2
        exit 2
    fi
fi

# Skip product's installation if this is an in-installation installer,
if test "${script_dir}" == "${TESSERACT_ORANGE_PREFIX}"; then
    printf \
        'Info: In-installation environment detected, skip product installtion.\n'
else
    print_progress \
        'Determining operation timestamp...\n'
    if ! operation_timestamp="$(date +%Y%m%d-%H%M%S)"; then
        printf \
            'Error: Unable to query the current timestamp.\n' \
            1>&2
        exit 2
    fi

    print_progress \
        'Installing the product...'
    if test -e "${TESSERACT_ORANGE_PREFIX}"; then
        printf \
            'Warning: Existing installation detected, moving...\n' \
            1>&2
        mv_opts=(--verbose)
        if ! \
            mv \
                "${mv_opts[@]}" \
                "${TESSERACT_ORANGE_PREFIX}" \
                "${TESSERACT_ORANGE_PREFIX}.old-${operation_timestamp}"; then
            printf \
                'Error: Unable to move the existing installation.\n' \
                1>&2
            exit 2
        fi
    fi

    printf \
        'Info: Creating the installation prefix directory...\n'
    install_opts_common=(
        --owner=root
        --group=root
        --verbose
    )
    install_opts_directory=(
        "${install_opts_common[@]}"
        --directory
        --mode=0755
    )
    if ! install "${install_opts_directory[@]}" "${TESSERACT_ORANGE_PREFIX}"; then
        printf \
            'Error: Unable to create the installation prefix directory.\n' \
            1>&2
        exit 2
    fi

    built_product_dir="${script_dir}/built-product"
    if ! test -e "${built_product_dir}"; then
        printf \
            'Error: Unable to locate the built product directory, this deployment archive may be corrupted.\n' \
            1>&2
        exit 2
    fi

    printf \
        'Info: Installing the product files...\n'
    rsync_opts=(
        # Data preservation settings
        --times
        --perms
        --links

        # Metadata manipulation
        --chown=root:root

        # File system traversal behavior
        --recursive

        # Output manipulation
        --human-readable
        --human-readable
        --verbose
    )
    if ! rsync "${rsync_opts[@]}" "${built_product_dir}/" "${TESSERACT_ORANGE_PREFIX}"; then
        printf \
            'Error: Unable to install the product files.\n' \
            1>&2
        exit 2
    fi
fi

printf \
    'Info: Operation completed without errors.\n'
